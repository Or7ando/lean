import .global
universe u
local notation `Ring` := CommRing.{u}
local notation `Set` :=  Type u  
open CommRing
namespace V_definition
variables (R : Ring)


def V_obj (S : set R)(A : Ring) : Type u := { Œ∂ : ring_hom R A | ‚àÄ x ‚àà S, Œ∂ (x)  = 0}  


lemma mem_V_obj (R : Ring) (S : set R)(A : Ring)(Œ∂: ring_hom R A) : (‚àÄ x ‚àà S, Œ∂ (x) = 0) ‚Üí   V_obj(R)(S)(A) :=
begin 
  intros h,
  exact {val := Œ∂, property := h}, 
end
lemma V_mem (S :set R)(A :Ring)(Œ∂ : V_obj(R)(S)(A)) : ‚àÄ x  ‚àà S, Œ∂.val x = 0 := begin 
  exact Œ∂.property, 
end 
@[ext]lemma  ext ( R : Ring) (S : set R)(A : Ring)(Œ∂1 Œ∂2 : V_obj R S A) : Œ∂1.val = Œ∂2.val ‚Üí Œ∂1 = Œ∂2 :=
begin 
            intro h, 
            cases Œ∂1, 
            cases Œ∂2,
            congr ; try { assumption },
end

def V_map (S : set R)(A B : Ring) (œà : A ‚ü∂ B) : V_obj(R)(S)(A) ‚Üí V_obj(R)(S)(B) := Œª Œ∂, begin 
   have Hypx : ‚àÄ x ‚àà S, œà (Œ∂.val x) = 0,
      intros x h,
      rw V_mem,
      exact œà.map_zero,
      assumption,
    exact {val :=  (ring_hom.comp œà ( Œ∂.val )), property := Hypx},
end
lemma comp_val (S : set R)(A B : Ring) (œà : A ‚ü∂ B)(Œ∂ : V_obj R S A) : 
 ((V_map R S A B œà) Œ∂).val = ring_hom.comp œà Œ∂.val := rfl
lemma one_val (S : set R)(A : Ring)(Œ∂ : V_obj R S A) : ((V_map R S A A (ùüôA)) Œ∂).val = Œ∂.val := 
begin
     rw comp_val,
     ext,
     rw [ring_hom.comp_apply],
     exact rfl,
end
def V (S : set R) : Ring ‚•§  Type u := begin
exact {
  obj := Œª A : Ring, V_obj R S A, 
  map := Œª A B : Ring, Œª œà : A ‚ü∂ B, V_map R S A B œà,   
  map_id' := Œª A : Ring, begin 
     funext,
     ext,
     rw one_val,
     exact rfl,
  end 
   }
end
end V_definition