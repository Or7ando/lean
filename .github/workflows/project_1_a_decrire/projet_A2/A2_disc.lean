import .sous_foncteur
import category_theory.elements
import .A2
open category_theory
open A2 
open int
-- universes  v u
lemma int_commute_with_morph  {A B :Type }[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f](n : ‚Ñï) : ‚àÄ x : A, f( n*x ) = n *(f x) := Œª x,
    nat.rec_on n (show  f(0*x) = 0* (f x), {rw [zero_mul,zero_mul], exact is_ring_hom.map_zero f, })
        (assume n, assume rec_hyp : f(n * x) = n *(f x),
            show f( (n+1)*x) = (n+1)*(f(x)),{
                rw [right_distrib,right_distrib,one_mul,one_mul,‚Üê rec_hyp,is_ring_hom.map_add f],
            })
structure A2_disc(R : Type )[comm_ring R] :=
(Œ∂ : A2 R)
(inv_disc : R)
(certif_disc : (Œ∂.a * Œ∂.a - ‚Üë4 * Œ∂.b ) * inv_disc = 1)
namespace A2_disc 
section
variables {R : Type } [comm_ring R]
--- id√©e faire des lemmes simplificateurs ! 
lemma disc :  ‚àÄ {Œ∂1 Œ∂2 : A2_disc R}, Œ∂1.Œ∂ = Œ∂2.Œ∂ ‚Üí ((Œ∂1.Œ∂.a = Œ∂2.Œ∂.a) ‚àß (Œ∂1.Œ∂.b = Œ∂2.Œ∂.b)) := 
begin 
    intros Œ∂1 Œ∂2,
    intro h, 
    split,
    apply congr_arg, assumption,
    apply congr_arg, assumption,
end 
lemma disc_ :  ‚àÄ {Œ∂1 Œ∂2 : A2_disc R}, Œ∂1.Œ∂ = Œ∂2.Œ∂  ‚Üí  (Œ∂1.Œ∂.a * Œ∂1.Œ∂.a - ‚Üë4 * Œ∂1.Œ∂.b ) = (Œ∂2.Œ∂.a * Œ∂2.Œ∂.a - ‚Üë4 * Œ∂2.Œ∂.b ) := 
begin 
    intros Œ∂1 Œ∂2,
    intro h,
    have H : ((Œ∂1.Œ∂.a = Œ∂2.Œ∂.a) ‚àß (Œ∂1.Œ∂.b = Œ∂2.Œ∂.b)),
        apply disc,
        assumption,
    rw H.1,
    rw H.2,
end 
    lemma inverse_unique (a b c d: R) : a * c = 1 ‚Üí d * b = 1 ‚Üí a = d ‚Üí c = b := Œª h1 h2 h3, begin  --- remettre dans l'ordre
        have : c = (a * b) * c,
            rw h3,
            rw h2,
            rw one_mul c,
        rw this,
        rw [mul_assoc, mul_comm b c,‚Üê mul_assoc,h1, one_mul],
        end 
    @[ext] lemma ext :  ‚àÄ {Œ∂1 Œ∂2 : A2_disc R}, (Œ∂1.Œ∂  = Œ∂2.Œ∂)  ‚Üí Œ∂1 = Œ∂2 := Œª Œ∂1 Œ∂2,
        begin 
            intro h, 
            cases Œ∂1, 
            cases Œ∂2,
            congr ; try { assumption },
            apply inverse_unique,
            exact Œ∂1_certif_disc,
            exact Œ∂2_certif_disc,
            exact  disc_ h,
        end 
open is_ring_hom
def map_A2_disc {A B :Type }[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f] : A2_disc A ‚Üí A2_disc B := Œª Œ∑,  begin  
    have  h : ((f Œ∑.Œ∂.a) * (f Œ∑.Œ∂.a)  - (  ‚Üë4 * (f Œ∑.Œ∂.b ))) * (f Œ∑.inv_disc) = 1,
            have j :    f( ‚Üë4* Œ∑.Œ∂.b) = ‚Üë4 * (f Œ∑.Œ∂.b ),
                exact int_commute_with_morph f (4) (Œ∑.Œ∂.b),
            rw [‚Üê j,‚Üê map_mul f,‚Üê map_sub f,‚Üê map_mul f,Œ∑.certif_disc],
            exact map_one f,
    exact { Œ∂ := {a := f Œ∑.Œ∂.a, b := f Œ∑.Œ∂.b},
          inv_disc :=  f Œ∑.inv_disc,
          certif_disc :=  h,},
    end
lemma map_comp_a {A B :Type }[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f] (Œ∂ : A2_disc (A) ) : (map_A2_disc f Œ∂).Œ∂.a = f Œ∂.Œ∂.a := rfl
lemma map_comp_b {A B :Type }[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f] (Œ∂ : A2_disc (A) ) : (map_A2_disc f Œ∂).Œ∂.b = f Œ∂.Œ∂.b := rfl
lemma map_comp_inv_disc {A B :Type }[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f] (Œ∂ : A2_disc (A) ) : (map_A2_disc f Œ∂).inv_disc = f Œ∂.inv_disc := rfl
def ùî∏2_disc: CommRing ‚•§ Type  :=  
{ obj := Œª R, A2_disc R,
  map := Œª R R' f, map_A2_disc f, 
}

-- def A :=   (functor.elements) (ùî∏2_disc)
end 
end A2_disc
