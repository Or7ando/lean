import .A2_disc
open A2_disc
open is_ring_hom
lemma power_commute_with_morph  {A B :Type}[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f](n : ‚Ñï) : ‚àÄ x : A, f( x^n ) = (f x)^n := Œª x,
    nat.rec_on n (show  f(x^0) = (f x)^0, {rw [pow_zero x,pow_zero (f x)], exact map_one f,})
        (assume n, assume rec_hyp : f(x^n) = (f(x))^n,
            show f(x^(n+1)) = (f(x))^(n+1),{rw [pow_succ x n,pow_succ (f(x)) n,‚Üê rec_hyp],exact map_mul (f)})
structure X (R : Type)[comm_ring R] :=  
    (x y : R) 
    (inv  : R)
    (certif : (x-y)^2 * inv = 1) 
namespace X
    section
        variables {R : Type} [comm_ring R]
        lemma diec_certif : ‚àÄ {Œ∂1 Œ∂2 : X R}, (Œ∂1.x  = Œ∂2.x) ‚Üí  (Œ∂1.y  = Œ∂2.y) ‚Üí (Œ∂1.x - Œ∂1.y)^2 =  (Œ∂2.x - Œ∂2.y)^2 := 
        begin   
            intros Œ∂1 Œ∂2,
            intros h1 h2, 
            rw [h1,h2],
        end 
        @[ext] lemma ext  : ‚àÄ {Œ∂1 Œ∂2 : X R}, (Œ∂1.x  = Œ∂2.x) ‚Üí  (Œ∂1.y  = Œ∂2.y)  ‚Üí Œ∂1 = Œ∂2 := Œª Œ∂1 Œ∂2, 
        begin 
            intro hx, 
            intro hy,
            cases Œ∂1, 
            cases Œ∂2,  
            congr; try {assumption},
            apply A2_disc.inverse_unique,
            exact Œ∂1_certif, 
            exact Œ∂2_certif,
            exact diec_certif hx hy,
        end 
        
        def map_X {A B :Type }[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f] : X A ‚Üí X B := Œª Œ∑, 
            begin
                exact {x := f Œ∑.x, y := f Œ∑.y, inv := f Œ∑.inv,certif := 
                begin
                    rw [‚Üê map_sub f,‚Üê power_commute_with_morph f,‚Üê map_mul f,Œ∑.certif],
                    exact map_one f, 
                end    }
            end
        lemma map_comp_x {A B :Type }[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f] (Œ∂ : X (A) ) : (map_X f Œ∂).x = f Œ∂.x := rfl
        lemma map_comp_y {A B :Type }[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f] (Œ∂ : X (A) ) : (map_X f Œ∂).y = f Œ∂.y := rfl
        lemma map_comp_inv {A B :Type }[comm_ring A][comm_ring B](f : A ‚Üí  B)[is_ring_hom  f] (Œ∂ : X (A) ) :
            (map_X f Œ∂).inv = f Œ∂.inv := rfl    
        def ùïè : CommRing ‚•§ Type :=  
        { obj := Œª R, X R,
        map := Œª R R' f, map_X f, 
        }
    end 
    #print ùïè 
end X