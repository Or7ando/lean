import to_product
open category_theory
open opposite
open category_theory.limits
open category_theory.category
open Product_stuff
universes v u
variables {C : Type u}
variables [ùíû : category.{v} C]
variables  [has_binary_products.{v} C][has_terminal.{v} C]
include ùíû

namespace Yoneda
def Yo (R : C)(A :C) := (yoneda.obj A).obj (op R)
def Yo_ (R : C) {A B : C}(œÜ : A ‚ü∂ B) := ((yoneda.map œÜ).app (op R) : Yo R A ‚ü∂ Yo R B)
notation R`‚ü¶`:33 A`‚üß`:21 := Yo R A  
notation  R`<`:100 œÜ`>`   := Yo_ R œÜ

lemma apply_to_composition {R : C}{Z K :C}(f :  R ‚ü∂ Z)(g : Z ‚ü∂ K) : 
     R < g > f = f ‚â´ g := rfl 
lemma composition_to_apply {R : C}{Z K :C}(f :  R ‚ü∂ Z)(g : Z ‚ü∂ K) : 
   f ‚â´ g  =   (R < g > f)  := rfl 
lemma id (R : C)(A : C) : R < ùüô A > = ùüô (R‚ü¶ A‚üß ) := begin 
     funext,
     exact comp_id g,
     -- have T : ((yoneda.map (ùüô A)).app (op R)) g = (g ‚â´ (ùüô A)),
end 


def Yoneda_preserve_product (Y : C)(A B : C) :
     Y ‚ü¶ A ‚®Ø B ‚üß  ‚âÖ Y ‚ü¶ A ‚üß  ‚®Ø Y‚ü¶ B ‚üß   := 
{ hom := (Y< œÄ1 > | Y <œÄ2>),
  inv := Œª g : (Y ‚ü∂ A) ‚®Ø (Y ‚ü∂ B),
    ( (œÄ1 : (Y ‚ü∂ A) ‚®Ø (Y ‚ü∂ B) ‚ü∂ (Y ‚ü∂ A)) g |  (œÄ2 : (Y ‚ü∂ A) ‚®Ø (Y ‚ü∂ B) ‚ü∂ (Y ‚ü∂ B)) g  ) 
      ,  --- g ‚â´ œÄ1 
  hom_inv_id' := begin
     funext g,
     rw types_comp_apply,
     apply prod.hom_ext,
     rw prod.lift_fst,
     rw ‚Üê  types_comp_apply (Y < œÄ1> | Y < œÄ2>)  œÄ1 g,
     rw prod.lift_fst,
     exact rfl,
     -- rw apply_to_composition,
     -- rw types_id,
     tidy,
  end,
   inv_hom_id' := begin
    apply prod.hom_ext,
    rw assoc, 
    rw prod.lift_fst,funext Œ∂ , 
    rw types_comp_apply,rw apply_to_composition,
    rw prod.lift_fst,
    exact rfl,
    rw assoc,
    rw prod.lift_snd,funext Œ∂,
     rw types_comp_apply, 
    rw apply_to_composition,
    rw prod.lift_snd,
    exact rfl,
  end
}

-- def Yoneda_preserve_product (Y : C)(A B : C) :
--      Y ‚ü¶ A ‚®Ø B ‚üß  ‚âÖ Y ‚ü¶ A ‚üß  ‚®Ø Y‚ü¶ B ‚üß   := 
-- { hom := prod.lift
--     (Œª f, f ‚â´ œÄ1)
--     (Œª f, f ‚â´ œÄ2),
--   inv := Œª f : (Y ‚ü∂ A) ‚®Ø (Y ‚ü∂ B),
--     (prod.lift
--       ((@category_theory.limits.prod.fst _ _ (Y ‚ü∂ A) (Y ‚ü∂ B) _ : ((Y ‚ü∂ A) ‚®Ø (Y ‚ü∂ B)) ‚Üí (Y ‚ü∂ A)) f)
--       ((@category_theory.limits.prod.snd _ _ (Y ‚ü∂ A) _ _ : ((Y ‚ü∂ A) ‚®Ø (Y ‚ü∂ B)) ‚Üí (Y ‚ü∂ B)) f : Y ‚ü∂ B)),
--   hom_inv_id' := begin
--     ext f,
--     cases j,   --- HERE
--     { simp, refl},
--     { simp, refl}
--   end,
--   inv_hom_id' := begin
--     apply prod.hom_ext,
--     { rw assoc, rw prod.lift_fst, obviously},
--     { rw assoc, rw prod.lift_snd, obviously}
--   end
-- }
--- Here it just sugar 

lemma composition (R : C) {X Y Z : C} (f : X ‚ü∂ Y) (g : Y ‚ü∂ Z) : 
          R < f ‚â´ g > =  R< f > ‚â´ R < g >
 :=  begin 
     funext Œ∂,
     rw apply_to_composition,
     rw types_comp_apply,
     iterate 2 {rw apply_to_composition},
     exact eq.symm  ( assoc Œ∂ f  g),
 end
def convertion {R : C}{A : C}(g : R‚ü¶ A‚üß ) : R ‚ü∂ A := g 

def Preserve.product_up_to_iso (R : C)(A B : C) : R‚ü¶A ‚®Ø B‚üß  ‚âÖ R‚ü¶A‚üß  ‚®Ø R‚ü¶B‚üß := Yoneda_preserve_product R A B
lemma Preserve.product.hom (R : C)(A B : C) : 
     (Preserve.product_up_to_iso R A B).hom =  (R < œÄ1  > | R < œÄ2 > ) := rfl

lemma Preserve.prod_morphism (R : C)(A B : C)(X :C)(f : X ‚ü∂ A)(g : X ‚ü∂ B) :
      R < (f | g) > ‚â´ (R < œÄ1  > | R < œÄ2 >) =  (R < f > | R < g >) :=  -- the  ‚â´  is  :/   
     begin 
          rw prod.left_composition,
          iterate 2 {rw [‚Üê composition]},
          rw prod.lift_fst,
          rw prod.lift_snd,
     end

lemma  Preserve.otimes_morphism (R : C){ X Y Z K :C}(f : X ‚ü∂ Y )(g : Z ‚ü∂ K) : 
 (R < œÄ1 > | R < œÄ2 >)  ‚â´ ( R < f > ‚äó R < g > ) =  R < (f ‚äó g) >  ‚â´ (R < œÄ1 > |R < œÄ2 >)    :=
  begin 
     rw prod.prod_comp_otimes,
     rw prod.otimes_is_prod,
     rw prod.left_composition,
     rw ‚Üê composition,
     rw ‚Üê composition,
     slice_rhs 2 3 {
          rw ‚Üê composition,
          rw prod.lift_snd,
     },
     slice_rhs 1 1 {
          rw ‚Üê composition,
          rw prod.lift_fst,
     },
end
lemma prod_apply {R :C}{A Y Z : C }(Œ∂ : R ‚ü¶ A ‚üß)  (f : A ‚ü∂ Y)(g : A ‚ü∂ Y) : 
     ( R< (f | g) >) Œ∂ = (R < f > Œ∂ | R < g > Œ∂ ) := 
          begin
               rw apply_to_composition,
               rw prod.left_composition,
               iterate 2 {rw apply_to_composition},
          end 
lemma otimes_apply {R :C}{A1 A2 Y Z : C }(Œ∂1 : R ‚ü¶ A1 ‚üß)(Œ∂2 : R‚ü¶ A2 ‚üß )
 (f1 : A1 ‚ü∂ Y)(f2 : A2 ‚ü∂ Z) : 
          R < (f1 ‚äó f2 ) > (Œ∂1 | Œ∂2) = ( R < f1 > Œ∂1 | R < f2 > Œ∂2 ) :=
 begin
     rw apply_to_composition,
     rw prod.prod_comp_otimes,
     exact rfl,  
 end 
 end Yoneda